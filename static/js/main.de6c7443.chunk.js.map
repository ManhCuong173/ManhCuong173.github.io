{"version":3,"sources":["components/TaskForm.js","components/TaskItem.js","components/List.js","components/Sort.js","components/Control.js","firebase.js","App.js","serviceWorker.js","index.js"],"names":["TaskForm","props","toggleDisplayTaskForm","isDisplayTaskForm","state","setState","currentDisplayTaskForm","onChangeState","event","name","target","value","onSubmitTaskForm","task","preventDefault","titleForm","taskTxt","status","currentState","idUserFireBase","taskEditing","updateCurrentItem","onResetTaskForm","taskAdding","textBtn","this","action","nextProps","className","type","onClick","onChange","required","style","color","border","Component","TaskItem","onDeleteItem","idFB","onUpdateStatus","newStatus","index","onUpdateItem","marginTop","List","idFireBase","onFilterItem","filterByName","filterByStatus","tasks","map","key","placeholder","Sort","sort","by","onSort","sortByName","sortValue","id","data-toggle","aria-haspopup","aria-expanded","aria-labelledby","background","padding","role","Control","firebase","initializeApp","apiKey","authDomain","databaseURL","projectId","storageBucket","messagingSenderId","appId","measurementId","App","onGenerateItem","newTaskItem","uuid","database","ref","push","onOpenAndAddItem","disableDisplayTaskForm","update","updateTask","remove","filter","wrapperRef","React","createRef","Math","floor","random","toString","s4","on","snapshot","firebaseData","val","Object","keys","newItemUpdate","assign","sortName","toLowerCase","indexOf","currentTask","nextTask","a","b","taskFormInstance","onUpdateItemAndSaveDB","classnName","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.de6c7443.chunk.js","sourcesContent":["import React, { Component } from 'react';\r\n\r\nclass TaskForm extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      isDisplayTaskForm: this.props.isDisplayTaskForm,\r\n      taskTxt: '',\r\n      status: true,\r\n      taskAdding: '',\r\n      taskEditing: 'waiting',\r\n      titleForm: 'Add item',\r\n      textBtn: 'Add'\r\n    }\r\n  }\r\n\r\n  toggleDisplayTaskForm = () => {\r\n    let isDisplayTaskForm = !this.state.isDisplayTaskForm\r\n    this.setState({\r\n      isDisplayTaskForm: isDisplayTaskForm\r\n    });\r\n    this.props.currentDisplayTaskForm(isDisplayTaskForm);\r\n  }\r\n\r\n  onChangeState = (event) => {\r\n    let name = event.target.name;\r\n    let value = event.target.value;\r\n    if (name === 'status') {\r\n      if (value == 1) value = true;\r\n      else value = false;\r\n    };\r\n\r\n    this.setState({\r\n      [name]: value\r\n    });\r\n  }\r\n\r\n  onSubmitTaskForm = (event) => {\r\n    let task\r\n    event.preventDefault();\r\n    if (this.state.titleForm === 'Add Item') {\r\n      task = {\r\n        taskTxt: this.state.taskTxt,\r\n        status: this.state.status\r\n      };\r\n\r\n      this.props.currentState(task);\r\n      this.setState({\r\n        taskTxt: '',\r\n        status: true\r\n      })\r\n    } else {\r\n      task = {\r\n        taskTxt: this.state.taskTxt,\r\n        status: this.state.status,\r\n        idUserFireBase: this.props.taskEditing.idUserFireBase\r\n      }\r\n      this.props.updateCurrentItem(task);\r\n      this.setState({\r\n        taskTxt: '',\r\n        state: true\r\n      })\r\n    }\r\n\r\n  }\r\n\r\n  onResetTaskForm = (event) => {\r\n    event.preventDefault();\r\n    this.setState({\r\n      taskTxt: '',\r\n      status: true\r\n    })\r\n  }\r\n\r\n  componentWillMount() {\r\n    this.setState({\r\n      taskTxt: this.props.taskEditing.action,\r\n      status: this.props.taskEditing.status,\r\n      titleForm: 'Update Item',\r\n      textBtn: 'Update'\r\n    })\r\n  }\r\n\r\n  componentWillReceiveProps(nextProps) {\r\n    if (nextProps.taskEditing !== this.props.taskEditing) {\r\n      this.setState({\r\n        taskTxt: nextProps.taskEditing.action,\r\n        status: nextProps.taskEditing.status,\r\n        taskEditing: 'onEditting',\r\n        titleForm: 'Update Item',\r\n        textBtn: 'Update' \r\n      });\r\n    } else if (nextProps.taskAdding == 'onAdding') {\r\n      this.setState({\r\n        taskTxt: '',\r\n        status: true,\r\n        taskAdding: 'onAdding',\r\n        titleForm: 'Add Item',\r\n        textBtn: 'Add'\r\n      });\r\n    }\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <div className=\"card mt-2 update-form\">\r\n        <div className=\"card-heading d-flex justify-content-between text-white border-bottom\">\r\n          <h5 className='px-2 py-2'> {this.state.titleForm} </h5>\r\n          <button className='btn' type='button' onClick={this.toggleDisplayTaskForm} >\r\n            <span className='fa fa-times text-white'></span>\r\n          </button>\r\n        </div>\r\n        <div className=\"card-body\">\r\n          <form>\r\n            <div className=\"form-group\">\r\n              <label>Action :</label>\r\n              <input\r\n                type=\"text\"\r\n                className=\"form-control search-input\"\r\n                name='taskTxt'\r\n                value={this.state.taskTxt}\r\n                onChange={this.onChangeState}\r\n                \r\n              />\r\n            </div>\r\n            <label>Status :</label>\r\n            <select\r\n              className=\"form-control search-input\"\r\n              required=\"required\"\r\n              name='status'\r\n              value={this.state.status == true ? 1 : 0}\r\n              onChange={this.onChangeState}\r\n            >\r\n              <option value={1}>Process</option>\r\n              <option value={0}>Hidden</option>\r\n            </select>\r\n            <br />\r\n            <div className=\"text-center\">\r\n              <button type=\"submit\" onClick={this.onSubmitTaskForm} \r\n              className = { this.state.textBtn === 'Add' ?  'btn add-btn' : 'btn update-btn'}\r\n              > {this.state.textBtn} </button>&nbsp;\r\n              <button type=\"reset\" className=\"btn\" onClick={this.onResetTaskForm} style = { { color: '#d7636e', border: '2px solid #d7636e' } }> Cancel  </button>\r\n            </div>\r\n          </form>\r\n        </div>\r\n      </div>\r\n    )\r\n  }\r\n}\r\n\r\nexport default TaskForm","import React, { Component } from 'react';\r\n\r\nclass TaskItem extends Component {\r\n\r\n  onDeleteItem = () => {\r\n    this.props.onDeleteItem(this.props.task.idFB);\r\n  }\r\n\r\n  onUpdateStatus = () => {\r\n    let newStatus = !this.props.task.status;\r\n    this.props.onUpdateStatus(this.props.index + 1, newStatus);\r\n  }\r\n\r\n  onUpdateItem = () => {\r\n    this.props.onUpdateItem(this.props.task);\r\n  }\r\n\r\n  render() {\r\n    return (\r\n\r\n      <tr className='task-item'>\r\n        <td> { this.props.index + 1 } </td>\r\n        <td className = { !this.props.task.status ? 'remove-item' : 'active-item' }> { this.props.task.action } </td>\r\n        <td className=\"text-center\">\r\n          <span className = { this.props.task.status === true ? 'badge px-2 py-2 status-item item-active' : 'badge  px-2 py-2 status-item item-hidden'} onClick = {this.onUpdateStatus}>\r\n            { this.props.task.status ? 'Process' : 'Done' } \r\n          </span>\r\n        </td>\r\n        <td className=\"text-center\">\r\n          <button type=\"button\" className=\"btn\" onClick = { this.onUpdateItem } style = { {border: '2px solid #9b9b17'} }>\r\n            <span className=\"fas fa-pencil-alt\" style = { { color: '#9b9b17' } }></span>\r\n          </button>\r\n          &nbsp;\r\n          <button type=\"button\" className=\"btn\" onClick = { this.onDeleteItem } style = { {border: '2px solid #d7636e', marginTop:'5px'} }>\r\n            <span className=\"fa fa-trash\" style = { { color: '#d7636e' } }></span>\r\n          </button>\r\n        </td>\r\n      </tr>\r\n    )\r\n  }\r\n}\r\n\r\nexport default TaskItem ","import React, { Component } from 'react';\r\nimport TaskItem from './TaskItem'\r\n\r\nclass List extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      filterByName: '',\r\n      filterByStatus: '1'\r\n    }\r\n  }\r\n\r\n  onUpdateStatus = (index, newStatus) => {\r\n    this.props.onUpdateStatus(index,newStatus); \r\n  };\r\n\r\n  onDeleteItem = (idFireBase) => {\r\n    this.props.onDeleteItem(idFireBase)\r\n  }\r\n\r\n  onUpdateItem = (task) => {\r\n    this.props.onUpdateItem(task);\r\n  }\r\n\r\n  onFilterItem = (event) => {\r\n    let name = event.target.name;\r\n    let value = event.target.value;\r\n    \r\n    this.setState({\r\n      [name]: value\r\n    })\r\n    this.props.onFilterItem(name, value);\r\n  }\r\n\r\n  render() {\r\n    var { filterByName } = this.state;\r\n    var  {filterByStatus} = this.state;\r\n\r\n    var tasks = this.props.tasks.map((task, index) => {\r\n      return <TaskItem \r\n              key = { index }\r\n              index = { index }\r\n              task = { task }\r\n              onUpdateStatus = { this.onUpdateStatus }\r\n              onUpdateItem = { this.onUpdateItem }\r\n              onDeleteItem = { this.onDeleteItem }\r\n              />\r\n    });\r\n    return (\r\n      <div className=\"row mt-15\">\r\n        <div className=\"col-xs-12 col-sm-12 col-md-12 col-lg-12\">\r\n          <table className=\"table table-borderless table-hover text-white\">\r\n            <thead>\r\n              <tr>\r\n                <th className=\"text-center\"></th>\r\n                <th className=\"text-center\">Name</th>\r\n                <th className=\"text-center\">Status</th>\r\n                <th className=\"text-center\">Action</th>\r\n              </tr>\r\n            </thead>\r\n            <tbody>\r\n              <tr>\r\n                <td></td>\r\n                <td>\r\n                  <input type=\"text\" \r\n                  className=\"form-control search-input\" \r\n                  name = 'filterByName'\r\n                  value = { filterByName }\r\n                  onChange = { this.onFilterItem }\r\n                  placeholder='...'\r\n                  />             \r\n                </td>\r\n                <td>\r\n                  <select className=\"form-control\"\r\n                  name = 'filterByStatus'\r\n                  value = { filterByStatus }\r\n                  onChange = { this.onFilterItem }\r\n                  className = 'filter-control'\r\n                  >\r\n                    <option value=\"2\">All</option>\r\n                    <option value=\"0\">Hidden</option>\r\n                    <option value=\"1\">Process</option>\r\n                  </select>\r\n                </td>\r\n                <td></td>\r\n              </tr>\r\n              { tasks }\r\n            </tbody>\r\n          </table>\r\n        </div>\r\n      </div>\r\n    )\r\n  }\r\n}\r\n\r\nexport default List ","import React, { Component } from 'react';\r\n\r\nclass Sort extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      sort: {\r\n        by: '',\r\n        value: ''\r\n      }\r\n    }\r\n  }\r\n\r\n  onClick(name, value) {\r\n    this.props.onSort(name, value);\r\n  }\r\n\r\n  componentWillReceiveProps(nextProps) {\r\n    if (nextProps.sortByName) {\r\n      this.setState({\r\n        sort: {\r\n          by: nextProps.sortByName,\r\n          value: nextProps.sortValue\r\n        }\r\n      })\r\n    }\r\n  }\r\n\r\n  render() {\r\n    let name = this.state.sort.by;\r\n    let value = this.state.sort.value;\r\n    return (\r\n      <div className=\"col-xs-6 col-sm-6 col-md-6 col-lg-6\">\r\n        <div className=\"dropdown mt-2\">\r\n          <button className=\"btn search-input dropdown-toggle\" type=\"button\" id=\"dropdownMenu1\" data-toggle=\"dropdown\" aria-haspopup=\"true\" aria-expanded=\"true\">\r\n            <i className=\"fas fa-sort\"></i> <span className=\"fa fa-caret-square-o-down ml-5\"></span>\r\n          </button>\r\n          <ul className=\"dropdown-menu\" aria-labelledby=\"dropdownMenu1\" style = { { background: '#1a1a1a', color: '#ffff', border: '1px solid #ffff', padding: '0 5px' } }>\r\n            <li onClick={() => { this.onClick('name', -1) }}>\r\n              <a role=\"button\">\r\n                <span className=\"fa fa-sort-alpha-up pr-5\">\r\n                  <i className={name == 'name' && value == -1 ? 'fas fa-check-double ml-5' : ''} ></i>\r\n                </span>\r\n              </a>\r\n            </li>\r\n            <li onClick={() => { this.onClick('name', 1) }} >\r\n              <a role=\"button\">\r\n                <span className=\"fa fa-sort-alpha-down pr-5\">\r\n                  <i className={name == 'name' && value == 1 ? 'fas fa-check-double ml-5' : ''\r\n                  } ></i>\r\n                </span>\r\n              </a>\r\n            </li>\r\n            <li role=\"separator\" className=\"divider\"></li>\r\n            <li onClick={() => { this.onClick('status', 1) }}>\r\n              <a role=\"button\" >\r\n                Process\r\n                <i className={name == 'status' && value == 1 ? 'fas fa-check-double ml-5' : ''\r\n                } ></i>\r\n              </a>\r\n            </li>\r\n            <li onClick={() => { this.onClick('status', -1) }}>\r\n              <a role=\"button\" >\r\n                Hidden\r\n                <i className={name == 'status' && value == -1 ? 'fas fa-check-double ml-5' : ''\r\n                } ></i>\r\n              </a>\r\n            </li>\r\n          </ul>\r\n        </div>\r\n      </div>\r\n    )\r\n  }\r\n}\r\n\r\nexport default Sort","import React, { Component } from 'react'\r\nimport Sort from './Sort'\r\n\r\nclass Control extends Component {\r\n\r\n  render() {\r\n    return (\r\n      <div className=\"row mt-15 mt-3 mb-4\">\r\n        <Sort \r\n        onSort = { this.props.onSort }\r\n        sortByName = {this.props.sortByName}\r\n        sortValue = { this.props.sortValue }\r\n        />\r\n      </div>\r\n    )\r\n  }\r\n\r\n}\r\n\r\nexport default Control;","import firebase from 'firebase' \r\n\r\nconst config = {\r\n  apiKey: \"AIzaSyBbWOQFngbLTpRKbPraabmIZ04pmy1t0S8\",\r\n  authDomain: \"todolist-reactjs-49965.firebaseapp.com\",\r\n  databaseURL: \"https://todolist-reactjs-49965.firebaseio.com\",\r\n  projectId: \"todolist-reactjs-49965\",\r\n  storageBucket: \"todolist-reactjs-49965.appspot.com\",\r\n  messagingSenderId: \"1015853344193\",\r\n  appId: \"1:1015853344193:web:e7d1b9f910e81386f97b40\",\r\n  measurementId: \"G-RE70W2X3TY\"\r\n}\r\n\r\nfirebase.initializeApp(config) \r\n\r\nexport default firebase\r\n\r\n","import React, { Component } from 'react';\nimport './App.css';\nimport TaskForm from './components/TaskForm';\nimport List from './components/List'\nimport Control from './components/Control';\nimport firebase from './firebase'\n\nclass App extends Component {\n\n   constructor(props) {\n      super(props);\n      this.state = {\n         tasks: [],\n         isDisplayTaskForm: true,\n         taskEditing: {\n            action: '',\n            status: false\n         },\n         taskAdding: '',\n         filter: {\n            name: '',\n            value: ''\n         },\n         sort: {\n            by: '',\n            value: ''\n         }\n      }\n\n      this.wrapperRef = React.createRef();\n\n   }\n\n   s4() {\n      return Math.floor((1 * Math.random()) * 0x100000).toString(16);\n   };\n\n   uuid() {\n      return this.s4() + this.s4() + '-' + this.s4() + '-' + this.s4() + '-' + this.s4() + this.s4();\n   };\n\n   onGenerateItem = (task) => {\n      let newTaskItem = {\n         id: this.uuid(),\n         action: task.taskTxt,\n         status: task.status\n      };\n\n      firebase.database().ref('/').push(newTaskItem);\n   };\n\n   onOpenAndAddItem = () => {\n      if (this.state.isDisplayTaskForm) {\n         this.setState({\n            taskAdding: 'onAdding'\n         });\n      } else {\n         this.setState({\n            isDisplayTaskForm: !this.state.isDisplayTaskForm,\n            taskAdding: 'onAdding'\n         });\n      }\n   };\n\n   disableDisplayTaskForm = () => {\n      this.setState({\n         isDisplayTaskForm: !this.state.isDisplayTaskForm\n      })\n\n   };\n\n   onUpdateStatus = (index, newStatus) => {\n      let item = this.state.tasks[index - 1];\n      let idFireBase = item.idFB;\n      firebase.database().ref('/' + idFireBase).update({ status: newStatus });\n   };\n\n   onUpdateItem = (task) => {\n\n      if (this.state.isDisplayTaskForm == false) {\n         this.setState({\n            isDisplayTaskForm: !this.state.isDisplayTaskForm\n         })\n      }\n\n      let updateTask = {\n         action: task.action,\n         status: task.status,\n         idUserFireBase: task.idFB\n      };\n\n      this.setState({\n         taskEditing: updateTask\n      });\n\n   }\n\n   onUpdateItemAndSaveDB(task) {\n      firebase.database().ref('/' + task.idUserFireBase).update({ action: task.taskTxt, status: task.status });\n   }\n\n   onDeleteItem = (idFireBase) => {\n      firebase.database().ref('/' + idFireBase).remove();\n   }\n\n   onFilterItem = (name, value) => {\n      this.setState({\n         filter: {\n            name: name,\n            value: value\n         }\n      })\n   }\n\n   onSort = (name, value) => {\n      this.setState({\n         sort: {\n            by: name,\n            value: value\n         }\n      })\n   }\n\n   componentWillMount() {\n      firebase.database().ref('/').on('value', (snapshot) => {\n\n         let firebaseData = [];\n         if (snapshot.val() == null) {\n            this.setState({\n               tasks: []\n            })\n         }\n         else {\n            Object.keys(snapshot.val()).map((id, index) => {\n               let newItemUpdate = Object.assign(snapshot.val()[id], { \"idFB\": id });\n               firebaseData.push(newItemUpdate);\n            })\n\n            this.setState({\n               tasks: firebaseData\n            });\n         }\n      });\n\n   };\n\n   render() {\n      /* equals let tasks = this.state.tasks*/\n      let tasks = this.state.tasks;\n      let { filter } = this.state;\n      let sortName = this.state.sort.by;\n      let sortValue = this.state.sort.value;\n\n      if (filter.name) {\n         if (filter.name === 'filterByName') {\n            if (filter.value) {\n               tasks = tasks.filter((task) => {\n                  return task.action.toLowerCase().indexOf(filter.value.toLowerCase()) > -1;\n               })\n            };\n         } else {\n            tasks = tasks.filter((task) => {\n               if (filter.value === '2') return task;\n               else if (filter.value === '0') return task.status === false;\n               else return task.status === true;\n            })\n         }\n      }\n      else if (sortName) {\n         if (sortName === 'name') {\n            tasks.sort((currentTask, nextTask) => {\n               if (currentTask.action > nextTask.action)  return sortValue;\n               else if ( currentTask.action < nextTask.action ) return -sortValue;\n               else return 0 \n            })\n         } else {\n            tasks.sort((a, b) => {\n               if (a.status > b.status) return -sortValue;\n               else if (a.status < b.status) return sortValue;\n               else return 0;\n            })\n         }\n      }\n      let { isDisplayTaskForm } = this.state;\n      let taskFormInstance = isDisplayTaskForm === true\n         ? <TaskForm\n            currentDisplayTaskForm={this.disableDisplayTaskForm}\n            isDisplayTaskForm={this.state.isDisplayTaskForm}\n            taskEditing={this.state.taskEditing}\n            taskAdding={this.state.taskAdding}\n            currentState={this.onGenerateItem}\n            updateCurrentItem={this.onUpdateItemAndSaveDB}\n            ref={this.wrapperRef}\n            classnName='task-form'\n         />\n         : '';\n\n      return (\n         <div className=\"container\">\n            <div className=\"text-center\">\n               <h2>Time is valueable!</h2>\n               <h2> Taking advantage of it!</h2>\n               <hr />\n            </div>\n            <div className=\"row\">\n               <div className=\"col-xs-4 col-sm-4 col-md-4 col-lg-4\">\n                  {/*Task Form*/}\n                  {taskFormInstance}\n               </div>\n               <div className={isDisplayTaskForm ? 'col-xs-8 col-sm-8 col-md-8 col-lg-8' : 'col-xs-12 col-sm-12 col-md-12 col-lg-12'}>\n                  <button type=\"button\" className=\"btn search-input mt-2\" onClick={this.onOpenAndAddItem} >\n                     <span className=\"fa fa-plus mr-5\"></span>\n                  </button>\n                  {/* Search - Sort */}\n                  <Control\n                     onSort={this.onSort}\n                     sortByName={this.state.sort.by}\n                     sortValue={this.state.sort.value}\n                  />\n                  {/* Table Result */}\n                  <List\n                     tasks={tasks}\n                     onUpdateStatus={this.onUpdateStatus}\n                     onUpdateItem={this.onUpdateItem}\n                     onDeleteItem={this.onDeleteItem}\n                     onFilterItem={this.onFilterItem}\n                  />\n               </div>\n            </div>\n         </div>\n      )\n   }\n\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App/>, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}
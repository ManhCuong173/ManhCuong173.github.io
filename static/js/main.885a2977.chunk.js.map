{"version":3,"sources":["firebase.js","constants/ActionTypes.js","actions/index.js","reducers/onTaskMethods.js","components/TaskForm.js","components/TaskItem.js","components/List.js","components/Sort.js","components/Control.js","App.js","serviceWorker.js","reducers/tasks.js","reducers/specifyDisplayForm.js","reducers/task.js","reducers/taskFilter.js","reducers/index.js","store/index.js","thunk/thunkMiddleware.js","index.js"],"names":["firebase","initializeApp","apiKey","authDomain","databaseURL","projectId","storageBucket","messagingSenderId","appId","measurementId","SHOW_UPDATED_TASK","SHOW_ADD_TASK","listAll","tasks","type","openForm","closeForm","s4","Math","floor","random","toString","onShowUpdatedTask","idFireBase","dispatch","database","ref","on","snapshot","copy","val","task","titleForm","types","textBtn","showUpdatedTask","onShowAddTask","action","status","TaskForm","props","toggleDisplayTaskForm","onChangeState","event","name","target","value","setState","onSubmitTaskForm","preventDefault","state","taskTxt","onAddTask","idUserFireBase","updateTask","onResetTaskForm","isDisplayTaskForm","nextProps","this","className","onClick","onChange","required","style","color","border","Component","connect","newTaskItem","id","push","then","taskInfo","update","TaskItem","onDeleteItem","onRemoveTask","idFB","onUpdateStatus","newStatus","updateStatus","onUpdateItem","index","marginTop","child","remove","taskStatus","onUpdateTaskStatus","List","onFilterItem","filterByName","filterByStatus","map","key","placeholder","Sort","sort","by","onSort","sortByName","sortValue","data-toggle","aria-haspopup","aria-expanded","aria-labelledby","background","padding","role","taskFilter","filterTask","onShowFilterOption","onFilterTask","Control","App","onOpenAndAddItem","onToggleForm","disableDisplayTaskForm","filter","length","toLowerCase","indexOf","taskFormInstance","classnName","toggleForm","Boolean","window","location","hostname","match","initialState","myReducer","stateCopy","currentTask","nextTask","a","b","myReducers","combineReducers","composeEnhancers","__REDUX_DEVTOOLS_EXTENSION_COMPOSE__","compose","store","createStore","applyMiddleware","ThunkMiddleware","Object","keys","data","assign","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.885a2977.chunk.js","sourcesContent":["import firebase from 'firebase' \r\n\r\nconst config = {\r\n  apiKey: \"AIzaSyBbWOQFngbLTpRKbPraabmIZ04pmy1t0S8\",\r\n  authDomain: \"todolist-reactjs-49965.firebaseapp.com\",\r\n  databaseURL: \"https://todolist-reactjs-49965.firebaseio.com\",\r\n  projectId: \"todolist-reactjs-49965\",\r\n  storageBucket: \"todolist-reactjs-49965.appspot.com\",\r\n  messagingSenderId: \"1015853344193\",\r\n  appId: \"1:1015853344193:web:e7d1b9f910e81386f97b40\",\r\n  measurementId: \"G-RE70W2X3TY\"\r\n}\r\n\r\nfirebase.initializeApp(config) \r\n\r\nexport default firebase\r\n\r\n","export const LIST_ALL = 'LIST_ALL'\r\nexport const ADD_TASK = 'ADD_TASK'\r\nexport const TOGGLE_FORM = 'TOGGLE_FORM'\r\nexport const OPEN_FORM = 'OPEN_FORM'\r\nexport const CLOSE_FORM = 'CLOSE_FORM'\r\nexport const REMOVE_TASK = 'REMOVE_TASK'\r\nexport const UPDATE_STATUS = 'UPDATE_STATUS'\r\nexport const SHOW_UPDATED_TASK =  {\r\n  text: 'SHOW_UPDATED_TASK',\r\n  titleForm: 'Update Item',\r\n  textBtn: 'Update'\r\n}\r\nexport const UPDATE_TASK = 'UPDATE_TASK'\r\nexport const SHOW_ADD_TASK = {\r\n  text: 'SHOW_ADD_TASK',\r\n  action: '',\r\n  status: true,\r\n  titleForm: 'Add Item',\r\n  textBtn: 'Add'\r\n}\r\nexport const TASK_FILTER = 'TASK_FILTER'\r\nexport const SHOW_FILTER_TASK = 'SHOW_FILTER_TASK'","import * as types from './../constants/ActionTypes'\r\nexport const listAll = (tasks) => {\r\n  return {\r\n    type : types.LIST_ALL,\r\n    tasks\r\n  }\r\n}\r\n\r\nexport const addTask = () => {\r\n  return {\r\n    type: types.ADD_TASK\r\n  }\r\n}\r\n\r\nexport const removeTask = () => {\r\n  return {\r\n    type: types.REMOVE_TASK\r\n  }\r\n}\r\n\r\nexport const updateTaskStatus = () => {\r\n  return {\r\n    type: types.UPDATE_STATUS\r\n  }\r\n}\r\n\r\nexport const toggleForm = (isDisplayTaskForm) => { \r\n  return {\r\n    type: types.TOGGLE_FORM,\r\n    isDisplayTaskForm\r\n  }\r\n}\r\n\r\nexport const openForm = () => {\r\n  return {\r\n    type: types.OPEN_FORM\r\n  }\r\n}\r\n\r\nexport const closeForm = () => {\r\n  return {\r\n    type: types.CLOSE_FORM\r\n  }\r\n}\r\n\r\nexport const showUpdatedTask = (task) => {\r\n  const copy = {...task, titleForm: types.SHOW_UPDATED_TASK.titleForm, textBtn: types.SHOW_UPDATED_TASK.textBtn};\r\n  return {\r\n    type: types.SHOW_UPDATED_TASK.text,\r\n    task : copy\r\n  }\r\n}\r\n\r\nexport const updateTask = () => {\r\n  return {\r\n    type: types.UPDATE_TASK\r\n  }\r\n}\r\n\r\nexport const showAddTask = () => {\r\n  return {\r\n    type: types.SHOW_ADD_TASK.text,\r\n    task: {\r\n      action: types.SHOW_ADD_TASK.action,\r\n      status: types.SHOW_ADD_TASK.status,\r\n      titleForm: types.SHOW_ADD_TASK.titleForm,\r\n      textBtn: types.SHOW_ADD_TASK.textBtn\r\n    }\r\n  }\r\n}\r\n\r\nexport const filterTask = (sort) => {\r\n  return {\r\n    type: types.TASK_FILTER,\r\n    sort\r\n  }\r\n}\r\n\r\nexport const onShowFilterOption = (sort) => {\r\n  return {\r\n    type: types.SHOW_FILTER_TASK,\r\n    sort\r\n  }\r\n}","import firebase from '../firebase';\r\nimport { addTask, removeTask, updateTaskStatus, showUpdatedTask, updateTask, showAddTask, filterTask, onShowFilterOption } from '../actions/index'\r\n\r\nfunction s4() {\r\n  return Math.floor((1 * Math.random()) * 0x100000).toString(16);\r\n};\r\n\r\nfunction uuid() {\r\n  return s4() + s4() + '-' + s4() + '-' + s4() + '-' + s4() + s4();\r\n};\r\n\r\nexport const onAddTask = (task) => {\r\n  return dispatch => {\r\n    let newTaskItem = {\r\n      id: uuid(),\r\n      action: task.taskTxt,\r\n      status: task.status\r\n    };\r\n    firebase.database().ref('/').push(newTaskItem).then(() => dispatch(addTask()))\r\n  }\r\n}\r\n\r\nexport const onRemoveTask = (idFireBase) => {\r\n  return dispatch => firebase.database().ref('/').child(idFireBase).remove().then(() => dispatch(removeTask()));\r\n}\r\n\r\nexport const onUpdateTaskStatus = (idFireBase, taskStatus) => {\r\n  return dispatch => firebase.database().ref(`/${idFireBase}`).update({ status: taskStatus }).then(() => dispatch(updateTaskStatus()))\r\n}\r\n\r\nexport const onShowUpdatedTask = (idFireBase) => {\r\n  return dispatch => {\r\n    firebase.database().ref(`/${idFireBase}`).on('value', function (snapshot) {\r\n      const copy = { ...snapshot.val(), idFireBase: idFireBase };\r\n      dispatch(showUpdatedTask(copy));\r\n    })\r\n  }\r\n}\r\n\r\nexport const onUpdateTask = (taskInfo) => {\r\n  return dispatch => {\r\n    firebase.database().ref(`/${taskInfo.idUserFireBase}`).update({\r\n      action: taskInfo.taskTxt,\r\n      status: taskInfo.status\r\n    }).then(() => dispatch(updateTask()))\r\n  }\r\n}\r\n\r\nexport const onShowAddTask = () => {\r\n  return dispatch => {\r\n    dispatch(showAddTask());\r\n  }\r\n}\r\n\r\nexport const onFilterTask = (by, value) => {\r\n  return dispatch => {\r\n    let sort = {\r\n      by,\r\n      value\r\n    }\r\n    dispatch(filterTask(sort));\r\n    dispatch(onShowFilterOption(sort))\r\n  }\r\n}","import React, { Component } from 'react';\r\nimport { connect } from 'react-redux';\r\nimport { onAddTask, onUpdateTask } from '../reducers/onTaskMethods';\r\nimport { closeForm } from './../actions'\r\nclass TaskForm extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      isDisplayTaskForm: this.props.isDisplayTaskForm,\r\n      taskTxt: '',\r\n      status: true,\r\n      titleForm: 'Add Item',\r\n      textBtn: 'Add'\r\n    }\r\n  }\r\n\r\n  toggleDisplayTaskForm = () => {\r\n    this.props.dispatch(closeForm())\r\n  }\r\n\r\n  onChangeState = (event) => {\r\n    let name = event.target.name;\r\n    let value = event.target.value;\r\n    if (name === 'status') {\r\n      if (value == 1) value = true;\r\n      else value = false;\r\n    };\r\n\r\n    this.setState({\r\n      [name]: value\r\n    });\r\n  }\r\n\r\n  onSubmitTaskForm = (event) => {\r\n    let task\r\n    event.preventDefault();\r\n    if (this.state.titleForm === 'Add Item') {\r\n      task = {\r\n        taskTxt: this.state.taskTxt,\r\n        status: this.state.status\r\n      };\r\n\r\n      this.props.onAddTask(task)\r\n      this.setState({\r\n        taskTxt: '',\r\n        status: true\r\n      })\r\n    } else {\r\n      task = {\r\n        taskTxt: this.state.taskTxt,\r\n        status: this.state.status,\r\n        idUserFireBase: this.props.task.idFireBase\r\n      }\r\n      this.props.updateTask(task);\r\n      this.setState({\r\n        taskTxt: '',\r\n        state: true\r\n      })\r\n    }\r\n\r\n  }\r\n\r\n  onResetTaskForm = (event) => {\r\n    event.preventDefault();\r\n    this.setState({\r\n      taskTxt: '',\r\n      status: true\r\n    })\r\n  }\r\n\r\n  componentWillReceiveProps(nextProps) {\r\n    if(nextProps.task) {\r\n      this.setState({\r\n        taskTxt: nextProps.task.action,\r\n        status: nextProps.task.status,\r\n        textBtn: nextProps.task.textBtn,\r\n        titleForm: nextProps.task.titleForm\r\n      })\r\n    }\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <div className=\"card mt-2 update-form\">\r\n        <div className=\"card-heading d-flex justify-content-between text-white border-bottom\">\r\n          <h5 className='px-2 py-2'> {this.state.titleForm} </h5>\r\n          <button className='btn' type='button' onClick={this.toggleDisplayTaskForm} >\r\n            <span className='fa fa-times text-white'></span>\r\n          </button>\r\n        </div>\r\n        <div className=\"card-body\">\r\n          <form>\r\n            <div className=\"form-group\">\r\n              <label>Action :</label>\r\n              <input\r\n                type=\"text\"\r\n                className=\"form-control search-input\"\r\n                name='taskTxt'\r\n                value={this.state.taskTxt}\r\n                onChange={this.onChangeState}\r\n\r\n              />\r\n            </div>\r\n            <label>Status :</label>\r\n            <select\r\n              className=\"form-control search-input\"\r\n              required=\"required\"\r\n              name='status'\r\n              value={this.state.status == true ? 1 : 0}\r\n              onChange={this.onChangeState}\r\n            >\r\n              <option value={1}>Process</option>\r\n              <option value={0}>Hidden</option>\r\n            </select>\r\n            <br />\r\n            <div className=\"text-center\">\r\n              <button type=\"submit\" onClick={this.onSubmitTaskForm}\r\n                className={this.state.textBtn === 'Add' ? 'btn add-btn' : 'btn update-btn'}\r\n              > {this.state.textBtn} </button>&nbsp;\r\n              <button type=\"reset\" className=\"btn\" onClick={this.onResetTaskForm} style={{ color: '#d7636e', border: '2px solid #d7636e' }}> Cancel  </button>\r\n            </div>\r\n          </form>\r\n        </div>\r\n      </div>\r\n    )\r\n  }\r\n}\r\n\r\nconst mapStateToProps = (state) => {\r\n  return {\r\n    task: state.task\r\n  }\r\n}\r\n\r\nconst mapDispatchToProps = (dispatch, props) => {\r\n  return {\r\n    onAddTask: (task) => {\r\n      dispatch(onAddTask(task))\r\n    },\r\n    updateTask: (task) => {\r\n      dispatch(onUpdateTask(task))\r\n    },\r\n    dispatch\r\n  }\r\n}\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(TaskForm)","import React, { Component } from 'react';\r\nimport { connect } from 'react-redux'\r\nimport { onRemoveTask, onUpdateTaskStatus, onShowUpdatedTask } from './../reducers/onTaskMethods'\r\nimport { openForm } from './../actions/index'\r\nclass TaskItem extends Component {\r\n\r\n  onDeleteItem = () => {\r\n    this.props.onRemoveTask(this.props.task.idFB);\r\n  }\r\n\r\n  onUpdateStatus = () => {\r\n    let newStatus = !this.props.task.status;\r\n    this.props.updateStatus(this.props.task.idFB, newStatus);\r\n  }\r\n\r\n  onUpdateItem = () => {\r\n   this.props.dispatch(openForm());\r\n   this.props.showUpdatedTask(this.props.task.idFB);\r\n  }\r\n\r\n  render() {\r\n    return (\r\n\r\n      <tr className='task-item'>\r\n        <td> { this.props.index + 1 } </td>\r\n        <td className = { !this.props.task.status ? 'remove-item' : 'active-item' }> { this.props.task.action } </td>\r\n        <td className=\"text-center\">\r\n          <span className = { this.props.task.status === true ? 'badge px-2 py-2 status-item item-active' : 'badge  px-2 py-2 status-item item-hidden'} onClick = {this.onUpdateStatus}>\r\n            { this.props.task.status ? 'Process' : 'Done' } \r\n          </span>\r\n        </td>\r\n        <td className=\"text-center\">\r\n          <button type=\"button\" className=\"btn\" onClick = { this.onUpdateItem } style = { {border: '2px solid #9b9b17'} }>\r\n            <span className=\"fas fa-pencil-alt\" style = { { color: '#9b9b17' } }></span>\r\n          </button>\r\n          &nbsp;\r\n          <button type=\"button\" className=\"btn\" onClick = { this.onDeleteItem } style = { {border: '2px solid #d7636e', marginTop:'5px'} }>\r\n            <span className=\"fa fa-trash\" style = { { color: '#d7636e' } }></span>\r\n          </button>\r\n        </td>\r\n      </tr>\r\n    )\r\n  }\r\n}\r\nconst mapDispatchToProps = (dispatch) => {\r\n  return {\r\n    onRemoveTask: (idFireBase) => dispatch(onRemoveTask(idFireBase)),\r\n    updateStatus: (idFireBase, taskStatus) => dispatch(onUpdateTaskStatus(idFireBase, taskStatus)),\r\n    showUpdatedTask: (idFireBase) => dispatch(onShowUpdatedTask(idFireBase)),\r\n    dispatch\r\n  }\r\n}\r\n\r\nexport default connect(null,mapDispatchToProps)(TaskItem) ","import React, { Component } from 'react';\r\nimport TaskItem from './TaskItem'\r\n\r\n\r\nclass List extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      filterByName: '',\r\n      filterByStatus: '1'\r\n    }\r\n  }\r\n\r\n  onFilterItem = (event) => {\r\n    let name = event.target.name;\r\n    let value = event.target.value;\r\n    \r\n    this.setState({\r\n      [name]: value\r\n    })\r\n    this.props.onFilterItem(name, value);\r\n  }\r\n\r\n  render() {\r\n    var { filterByName } = this.state;\r\n    var  {filterByStatus} = this.state;  \r\n    var tasks = this.props.tasks.map((task, index) => {\r\n      return <TaskItem \r\n              key = { index }\r\n              index = { index }\r\n              task = { task }\r\n              />\r\n    });\r\n    return (\r\n      <div className=\"row mt-15\">\r\n        <div className=\"col-xs-12 col-sm-12 col-md-12 col-lg-12\">\r\n          <table className=\"table table-borderless table-hover text-white\">\r\n            <thead>\r\n              <tr>\r\n                <th className=\"text-center\"></th>\r\n                <th className=\"text-center\">Name</th>\r\n                <th className=\"text-center\">Status</th>\r\n                <th className=\"text-center\">Action</th>\r\n              </tr>\r\n            </thead>\r\n            <tbody>\r\n              <tr>\r\n                <td></td>\r\n                <td>\r\n                  <input type=\"text\" \r\n                  className=\"form-control search-input\" \r\n                  name = 'filterByName'\r\n                  value = { filterByName }\r\n                  onChange = { this.onFilterItem }\r\n                  placeholder='...'\r\n                  />             \r\n                </td>\r\n                <td>\r\n                  <select className=\"form-control filter-control\"\r\n                  name = 'filterByStatus'\r\n                  value = { filterByStatus }\r\n                  onChange = { this.onFilterItem }\r\n                  >\r\n                    <option value=\"2\">All</option>\r\n                    <option value=\"0\">Hidden</option>\r\n                    <option value=\"1\">Process</option>\r\n                  </select>\r\n                </td>\r\n                <td></td>\r\n              </tr>\r\n              { tasks }\r\n            </tbody>\r\n          </table>\r\n        </div>\r\n      </div>\r\n    )\r\n  }\r\n}\r\n\r\n\r\nexport default List","import React, { Component } from 'react';\r\nimport { connect } from 'react-redux'\r\nimport { onFilterTask } from './../reducers/onTaskMethods';\r\n\r\nclass Sort extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      sort: {\r\n        by: '',\r\n        value: ''\r\n      }\r\n    }\r\n  }\r\n\r\n  onClick(by, value) {\r\n    this.props.onSort(by, value);\r\n  }\r\n\r\n  componentWillReceiveProps(nextProps) {\r\n    if (nextProps.sortByName) {\r\n      this.setState({\r\n        sort: {\r\n          by: nextProps.sortByName,\r\n          value: nextProps.sortValue\r\n        }\r\n      })\r\n    }\r\n  }\r\n\r\n  render() {\r\n    let name = this.state.sort.by;\r\n    let value = this.state.sort.value;\r\n    return (\r\n      <div className=\"col-xs-6 col-sm-6 col-md-6 col-lg-6\">\r\n        <div className=\"dropdown mt-2\">\r\n          <button className=\"btn search-input dropdown-toggle\" type=\"button\" id=\"dropdownMenu1\" data-toggle=\"dropdown\" aria-haspopup=\"true\" aria-expanded=\"true\">\r\n            <i className=\"fas fa-sort\"></i> <span className=\"fa fa-caret-square-o-down ml-5\"></span>\r\n          </button>\r\n          <ul className=\"dropdown-menu\" aria-labelledby=\"dropdownMenu1\" style = { { background: '#1a1a1a', color: '#ffff', border: '1px solid #ffff', padding: '0 5px' } }>\r\n            <li onClick={() => { this.onClick('name', -1) }}>\r\n              <a role=\"button\">\r\n                <span className=\"fa fa-sort-alpha-up pr-5\">\r\n                  <i className={this.props.sort.by == 'name' && this.props.sort.value == -1 ? 'fas fa-check-double ml-5' : ''} ></i>\r\n                </span>\r\n              </a>\r\n            </li>\r\n            <li onClick={() => { this.onClick('name', 1) }} >\r\n              <a role=\"button\">\r\n                <span className=\"fa fa-sort-alpha-down pr-5\">\r\n                  <i className={this.props.sort.by == 'name' && this.props.sort.value == 1 ? 'fas fa-check-double ml-5' : ''\r\n                  } ></i>\r\n                </span>\r\n              </a>\r\n            </li>\r\n            <li role=\"separator\" className=\"divider\"></li>\r\n            <li onClick={() => { this.onClick('status', 1) }}>\r\n              <a role=\"button\" >\r\n                Process\r\n                <i className={this.props.sort.by == 'status' && this.props.sort.value == 1 ? 'fas fa-check-double ml-5' : ''\r\n                } ></i>\r\n              </a>\r\n            </li>\r\n            <li onClick={() => { this.onClick('status', -1) }}>\r\n              <a role=\"button\" >\r\n                Hidden\r\n                <i className={this.props.sort.by == 'status' && this.props.sort.value == -1 ? 'fas fa-check-double ml-5' : ''\r\n                } ></i>\r\n              </a>\r\n            </li>\r\n          </ul>\r\n        </div>\r\n      </div>\r\n    )\r\n  }\r\n}\r\n\r\nconst mapStateToProps = (state) => {\r\n  return {\r\n    sort: state.taskFilter\r\n  }\r\n}\r\n\r\nconst mapDispatchToProps = (dispatch) => {\r\n  return {\r\n    onSort :  (by, value) => {\r\n      dispatch(onFilterTask(by, value));\r\n    }\r\n  }\r\n}\r\n\r\nexport default  connect(mapStateToProps, mapDispatchToProps)(Sort)","import React, { Component } from 'react'\r\nimport Sort from './Sort'\r\n\r\nclass Control extends Component {\r\n\r\n  render() {\r\n    return (\r\n      <div className=\"row mt-15 mt-3 mb-4\">\r\n        <Sort \r\n        />\r\n      </div>\r\n    )\r\n  }\r\n\r\n}\r\n\r\nexport default Control;","import React, { Component } from 'react';\nimport './App.css';\nimport TaskForm from './components/TaskForm';\nimport List from './components/List'\nimport Control from './components/Control';\nimport { connect } from 'react-redux';\nimport { toggleForm } from './actions/index';\nimport { onShowAddTask } from './reducers/onTaskMethods'\n\nclass App extends Component {\n\n   constructor(props) {\n      super(props);\n      this.state = {\n         tasks: [],\n         isDisplayTaskForm: true,\n         filter: {\n            name: '',\n            value: ''\n         },\n         sort: {\n            by: '',\n            value: ''\n         }\n      }\n\n\n   }\n\n   onOpenAndAddItem = () => {\n      if(this.props.isDisplayTaskForm) this.props.dispatch(onShowAddTask())\n      else this.props.onToggleForm(!this.props.isDisplayTaskForm);\n   };\n\n   disableDisplayTaskForm = () => {\n      this.setState({\n         isDisplayTaskForm: !this.state.isDisplayTaskForm\n      })\n\n   };\n\n   onFilterItem = (name, value) => {\n      this.setState({\n         filter: {\n            name: name,\n            value: value\n         }\n      })\n   }\n\n   render() {\n      /* equals let tasks = this.state.tasks*/\n      let tasks =  this.props.tasks;\n      if(!tasks.length) tasks = [];\n      let { filter } = this.state;\n      \n      if (filter.name) {\n         if (filter.name === 'filterByName') {\n            if (filter.value) {\n               tasks = tasks.filter((task) => {\n                  return task.action.toLowerCase().indexOf(filter.value.toLowerCase()) > -1;\n               })\n            };\n         } else {\n            tasks = tasks.filter((task) => {\n               if (filter.value === '2') return task;\n               else if (filter.value === '0') return task.status === false;\n               else return task.status === true;\n            })\n         }\n      }\n      let { isDisplayTaskForm } = this.props;\n      let taskFormInstance = isDisplayTaskForm === true\n         ? <TaskForm\n            isDisplayTaskForm={ isDisplayTaskForm }\n            classnName='task-form'\n         />\n         : '';\n\n      return (\n         <div className=\"container\">\n            <div className=\"text-center\">\n               <h2>Time is valueable!</h2>\n               <h2> Taking advantage of it!</h2>\n               <hr />\n            </div>\n            <div className=\"row\">\n               <div className=\"col-xs-4 col-sm-4 col-md-4 col-lg-4\">\n                  {/*Task Form*/}\n                  {taskFormInstance}\n               </div>\n               <div className={isDisplayTaskForm ? 'col-xs-8 col-sm-8 col-md-8 col-lg-8' : 'col-xs-12 col-sm-12 col-md-12 col-lg-12'}>\n                  <button type=\"button\" className=\"btn search-input mt-2\" onClick={this.onOpenAndAddItem} >\n                     <span className=\"fa fa-plus mr-5\"></span>\n                  </button>\n                  {/* Search - Sort */}\n                  <Control\n                  />\n                  {/* Table Result */}\n                  <List\n                     tasks={tasks}\n                     onFilterItem={this.onFilterItem}\n                  />\n               </div>\n            </div>\n         </div>\n      )\n   }\n\n}\nconst mapStateToProps = (state) => {\n   return {\n      tasks: state.tasks,\n      isDisplayTaskForm: state.isDisplayTaskForm\n   }\n}\n\nconst mapDispatchToProps = (dispatch) => {\n   return {\n      onToggleForm: isDisplayTaskForm => dispatch(toggleForm(isDisplayTaskForm)),\n      dispatch\n   }\n}\nexport default connect(mapStateToProps, mapDispatchToProps)(App);\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import * as types from './../constants/ActionTypes'\r\n\r\nlet initialState = [];\r\n\r\nvar myReducer = (state = initialState, action) => {\r\n  switch (action.type) {\r\n    case types.LIST_ALL: return state = action.tasks\r\n    case types.ADD_TASK:\r\n      return state\r\n    case types.REMOVE_TASK:\r\n      return state\r\n    case types.UPDATE_STATUS:\r\n      return state\r\n    case types.UPDATE_TASK:\r\n      return state\r\n    case types.TASK_FILTER:\r\n      let stateCopy = [...state];\r\n      if (action.sort.by === 'name') {\r\n        stateCopy.sort((currentTask, nextTask) => {\r\n          if (currentTask.action > nextTask.action) return action.sort.value;\r\n          else if (currentTask.action < nextTask.action) return -action.sort.value;\r\n          else return 0\r\n        })\r\n      } else {\r\n        stateCopy.sort((a, b) => {\r\n          if (a.status > b.status) return -action.sort.value;\r\n          else if (a.status < b.status) return action.sort.value;\r\n          else return 0;\r\n        })\r\n      }\r\n      return stateCopy\r\n    // console.log(action.sort)\r\n    default: return state\r\n  }\r\n}\r\n\r\nexport default myReducer","import * as types from './../constants/ActionTypes'\r\n\r\nlet initialState = true;\r\n\r\nvar myReducer = (state = initialState, action) => {\r\n  switch (action.type) {\r\n    case types.TOGGLE_FORM:     \r\n      return state = action.isDisplayTaskForm\r\n    case types.OPEN_FORM:\r\n      return state = true;\r\n    case types.CLOSE_FORM:\r\n      return state = false;\r\n    default: return state\r\n  }\r\n}\r\n\r\nexport default myReducer","import * as types from './../constants/ActionTypes'\r\n\r\nlet initialState = [];\r\n\r\nvar myReducer = (state = initialState, action) => {\r\n  switch (action.type) {\r\n    case types.SHOW_UPDATED_TASK.text: \r\n      return action.task\r\n    case types.SHOW_ADD_TASK.text:\r\n      return action.task\r\n    default: return state\r\n  }\r\n}\r\n\r\nexport default myReducer","import * as types from './../constants/ActionTypes'\r\n\r\nlet initialState = {\r\n  by: '',\r\n  value: ''\r\n};\r\n\r\nvar myReducer = (state = initialState, action) => {\r\n  switch (action.type) {\r\n    case types.SHOW_FILTER_TASK:\r\n      return action.sort\r\n    default: return state\r\n  }\r\n}\r\n\r\nexport default myReducer","import { combineReducers } from 'redux'\r\nimport tasks from './tasks'\r\nimport isDisplayTaskForm from './specifyDisplayForm'\r\nimport task from './task'\r\nimport taskFilter from './taskFilter'\r\n\r\nlet myReducers = combineReducers({\r\n  tasks,\r\n  task,\r\n  taskFilter,\r\n  isDisplayTaskForm,\r\n});\r\n\r\nexport default myReducers","import { createStore, applyMiddleware, compose } from 'redux'\r\nimport ThunkMiddleware from 'redux-thunk'\r\nimport myReducer from './../reducers/index'\r\nimport { thunk_action_creator } from './../thunk/thunkMiddleware'\r\nimport { onShowAddTask } from './../reducers/onTaskMethods'\r\n\r\nconst composeEnhancers = window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__ || compose;\r\nconst store = createStore(\r\n  myReducer, \r\n  /* preloadedState, */ composeEnhancers(\r\n  applyMiddleware(ThunkMiddleware)\r\n  ));  \r\nstore.dispatch(thunk_action_creator())\r\nstore.dispatch(onShowAddTask())\r\nexport { store }","import { listAll } from './../actions/index';\r\nimport firebase from './../firebase'\r\n\r\n/**\r\n * THUNK\r\n * \r\n */\r\nexport const thunk_action_creator = () =>  {\r\n  return dispatch => {\r\n    firebase.database().ref('/').on('value', (snapshot) => {\r\n      let tasks = [];\r\n      if (snapshot.val()) {\r\n          Object.keys(snapshot.val()).map((id, index) => {\r\n          let data = Object.assign(snapshot.val()[id], { \"idFB\": id });         \r\n          tasks.push(data);\r\n        });\r\n        dispatch(listAll(tasks));\r\n      }\r\n      else {\r\n        tasks = []\r\n        dispatch(listAll(tasks));\r\n      }\r\n    })\r\n  }\r\n}","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport { store } from './store/index'\nimport { Provider } from 'react-redux'\n\nReactDOM.render(\n  <Provider store={store}>\n    <App />\n  </Provider>\n  ,\n  document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}